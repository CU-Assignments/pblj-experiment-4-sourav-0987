package Java_LAb;

import java.util.*;
class Card{
    private String symbol;
    private String value;

    public Card(String symbol,String value){
        this.symbol = symbol;
        this.value = value;
    }
    public String getSymbol() {
        return symbol;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return value + " of " + symbol;
    }
}


public class CardCollection {
    private static Collection<Card> cards = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("\nCard Collection System");
            System.out.println("1. Add Card");
            System.out.println("2. Search Cards by Symbol");
            System.out.println("3. Display All Cards");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addCard();
                    break;
                case 2:
                    searchCardsBySymbol();
                    break;
                case 3:
                    displayAllCards();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void addCard() {
        System.out.print("Enter Card Symbol (e.g., Hearts, Diamonds, Clubs, Spades): ");
        String symbol = scanner.nextLine();
        System.out.print("Enter Card Value (e.g., Ace, 2, King): ");
        String value = scanner.nextLine();
        cards.add(new Card(symbol, value));
        System.out.println("Card added successfully!");
    }

    private static void searchCardsBySymbol() {
        System.out.print("Enter Symbol to search (e.g., Hearts, Diamonds, Clubs, Spades): ");
        String symbol = scanner.nextLine();
        boolean found = false;
        for (Card card : cards) {
            if (card.getSymbol().equalsIgnoreCase(symbol)) {
                System.out.println(card);
                found = true;
            }
        }
        if (!found) {
            System.out.println("No cards found for the symbol " + symbol);
        }
    }

    private static void displayAllCards() {
        if (cards.isEmpty()) {
            System.out.println("No cards available.");
        } else {
            for (Card card : cards) {
                System.out.println(card);
            }
        }
    }
}
package Java_LAb;
import java.util.concurrent.locks.*;

class TicketBookingSystem {
    private int availableSeats;
    private final Lock lock = new ReentrantLock();

    public TicketBookingSystem(int seats) {
        this.availableSeats = seats;
    }

    public void bookTicket(String customerType, int seatsRequested) {
        lock.lock();
        try {
            if (availableSeats >= seatsRequested) {
                System.out.println(customerType + " successfully booked " + seatsRequested + " seat(s). Remaining: " + (availableSeats - seatsRequested));
                availableSeats -= seatsRequested;
            } else {
                System.out.println(customerType + " booking failed. Not enough seats available.");
            }
        } finally {
            lock.unlock();
        }
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem system;
    private String customerType;
    private int seatsRequested;

    public BookingThread(TicketBookingSystem system, String customerType, int seatsRequested, int priority) {
        this.system = system;
        this.customerType = customerType;
        this.seatsRequested = seatsRequested;
        setPriority(priority);
    }

    @Override
    public void run() {
        system.bookTicket(customerType, seatsRequested);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem system = new TicketBookingSystem(10);

        // Creating threads for different booking types
        BookingThread vip1 = new BookingThread(system, "VIP Customer 1", 2, Thread.MAX_PRIORITY);
        BookingThread vip2 = new BookingThread(system, "VIP Customer 2", 3, Thread.MAX_PRIORITY);
        BookingThread regular1 = new BookingThread(system, "Regular Customer 1", 4, Thread.NORM_PRIORITY);
        BookingThread regular2 = new BookingThread(system, "Regular Customer 2", 2, Thread.NORM_PRIORITY);
        BookingThread regular3 = new BookingThread(system, "Regular Customer 3", 1, Thread.MIN_PRIORITY);

        // Starting threads
        vip1.start();
        vip2.start();
        regular1.start();
        regular2.start();
        regular3.start();
    }
}
